{"version":3,"file":"js/compo1.9f8ed90a.js","mappings":"sNAEIA,EAAAA,EAAAA,GAAmB,UAAf,cAAU,G,GAGZA,EAAAA,EAAAA,GAAgB,YAAV,OAAG,G,GAETA,EAAAA,EAAAA,GAAgB,YAAV,OAAG,G,GAGXA,EAAAA,EAAAA,GAAI,mB,0CATNC,EAAAA,EAAAA,IAWM,YAVJC,GACAF,EAAAA,EAAAA,GAMM,sBALJA,EAAAA,EAAAA,GAAyD,SAAlDG,KAAK,O,qCAAgBC,EAAAC,KAAIC,GAAGC,QAAKC,EAAA,KAAAA,EAAA,OAAAC,IAAEC,EAAAC,aAAAD,EAAAC,eAAAF,K,iBAAdL,EAAAC,QAC5BO,GAAgB,SAChBZ,EAAAA,EAAAA,GAAyD,SAAlDG,KAAK,O,qCAAgBC,EAAAS,KAAIP,GAAGC,QAAKC,EAAA,KAAAA,EAAA,OAAAC,IAAEC,EAAAC,aAAAD,EAAAC,eAAAF,K,iBAAdL,EAAAS,QAC5BC,GACAd,EAAAA,EAAAA,GAA+B,aAAAe,EAAAA,EAAAA,IAAtBL,EAAAM,MAAMC,QAAM,KAEvBC,GAAI,wBACQH,EAAAA,EAAAA,IAAGL,EAAAS,KAAG,I,eAoBtB,GACEC,KAAAA,GAEE,MAAMD,EAAI,EAEV,IAAIH,GAAQK,EAAAA,EAAAA,IAAS,CACnBhB,KAAK,EACLQ,KAAK,EACLI,OAAO,IAGT,SAASN,IACPK,EAAMC,OAASK,SAASN,EAAMX,MAAQiB,SAASN,EAAMH,KACvD,CAEA,MAAO,CAELM,MACAH,QACAL,cAEJ,G,QC/CF,MAAMY,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://vue3-cml-example/./src/views/composition/CalculatorComposition1.vue","webpack://vue3-cml-example/./src/views/composition/CalculatorComposition1.vue?1b5f"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>Calculator</h2>\r\n    <div>\r\n      <input type=\"text\" v-model=\"num1\" @keyup=\"plusNumbers\" />\r\n      <span> + </span>\r\n      <input type=\"text\" v-model=\"num2\" @keyup=\"plusNumbers\" />\r\n      <span> = </span>\r\n      <span>{{ state.result }}</span>\r\n    </div>\r\n    <hr>\r\n     컴포지션에서의 바인딩{{ num }}\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\n/*\r\nComposition API 와 setup 함수의 등장\r\n컴포지션 API에서 첫번째 특징이 setup() 함수 이다.\r\n\r\nsetup() 함수에 관하여\r\n  -setup 함수는, Vue 3 에서 새로 나온 Composition API 이다.\r\n  - 기존에 data, methods 등으로 흩어져있던것을, 하나의 장소로 모으게 해준다.\r\n  - template 에서 사용하고자하는 변수, 함수등을 정의한뒤,\r\n  - 객체에 하나씩 골라담아, return 해주면 template 에서 해당 변수와 함수를 접근할수있다.. \r\n */\r\n\r\n// 바인딩\r\nimport {reactive} from 'vue'\r\n\r\nexport default {\r\n  setup(){\r\n\r\n    const num=2;\r\n\r\n    let state = reactive({\r\n      num1:0,\r\n      num2:0,\r\n      result:0      \r\n    })\r\n\r\n    function plusNumbers(){\r\n      state.result = parseInt(state.num1) + parseInt(state.num2)\r\n    }\r\n\r\n    return {\r\n      //reactive로 선언된 state와 plusNumbers 함수를 반환함으로써 기존 data, methods 옵션 처럼 사용이 가능해짐\r\n      num,\r\n      state,\r\n      plusNumbers\r\n    }\r\n  }\r\n}\r\n</script>","import { render } from \"./CalculatorComposition1.vue?vue&type=template&id=27388a37\"\nimport script from \"./CalculatorComposition1.vue?vue&type=script&lang=js\"\nexport * from \"./CalculatorComposition1.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["_createElementVNode","_createElementBlock","_hoisted_1","type","_ctx","num1","$event","onKeyup","_cache","args","$setup","plusNumbers","_hoisted_2","num2","_hoisted_3","_toDisplayString","state","result","_hoisted_4","num","setup","reactive","parseInt","__exports__","render"],"sourceRoot":""}